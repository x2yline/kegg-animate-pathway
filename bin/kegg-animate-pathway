#!/usr/bin/env python

from __future__ import print_function
from __future__ import division

import sys, os
import argparse
import contextlib
import csv
import logging
import random
from io import BytesIO
#import BytesIO
import xml.etree.ElementTree as xml

parser = argparse.ArgumentParser()

input_parser = parser.add_argument_group("input options")

input_parser.add_argument("-p", "--pathway-id", required = True,
    dest = "pathway_id", metavar = "KEGG IDENTIFIER",
    help = "(mandatory) KEGG identifier for a pathway")

input_parser.add_argument("-l", "--levels", required = True,
    dest = "datasets", metavar = "FILENAME", action = "append",
    help = """(mandatory) CSV-formatted file with activity levels; this option
    can be used more than once, one per file""")

process_parser = parser.add_argument_group("processing options")

process_parser.add_argument("--aggregate",
    dest = "aggregation_function",
    choices = ("mean", "median", "lowest", "highest", "random"),
    default = "median",
    help = """(optional) Function used to aggregate activity levels when more
    than one entity share the same graphic element. Default: %(default)s""")

process_parser.add_argument("--mid-value",
    dest = "mid_value", metavar = "VALUE", type = float,
    help = """(optional) If set, the color palette used for the overlays will
    use this mid value for the mid color (see --mid-color)""")

output_parser = parser.add_argument_group("output options")

output_parser.add_argument("-o", "--output", required = True,
    dest = "output_fn", metavar = "FILENAME",
    help = "(mandatory) Name for the output movie file")

output_parser.add_argument("--duration",
    dest = "output_duration", metavar = "SECONDS", type = int,
    help = """(optional) Duration of the output movie, in seconds. Default: one
    seconds per time point""")

output_parser.add_argument("--fps",
    dest = "output_fps", metavar = "INTEGER", type = int, default = 25,
    help = "(optional) Frame rate of the output movie. Default: %(default)d")

output_parser.add_argument("--with-labels",
    dest = "show_labels", action = "store_true", default = False,
    help = "(optional) If set, will show gene and compound names on the figure")

output_parser.add_argument("--label-font",
    dest = "label_font", metavar = "FONTNAME",
    help = "(optional) Set a TrueType font to use for the labels")

output_parser.add_argument("--label-size",
    dest = "label_size", metavar = "INTEGER", type = int, default = 10,
    help = """(optional) Set a font size to use for the labels; will be ignored
    if not font is provided by --label-font. Default: %(default)d""")

output_parser.add_argument("--start-color",
    dest = "start_color", metavar = "INTEGER",
    type = int, nargs = 3, default = (0, 0, 0),
    help = """(optional) Starting color, as a R/G/B triple of 8-bits integers.
    Default: %(default)s""")

output_parser.add_argument("--mid-color",
    dest = "mid_color", metavar = "INTEGER",
    type = int, nargs = 3,
    help = """(optional) Middle color, as a R/G/B triple of 8-bits integers;
    ignored if no middle value was defined (see --mid-value).
    Default: midpoint between --start-color and --end-color""")

output_parser.add_argument("--end-color",
    dest = "end_color", metavar = "INTEGER",
    type = int, nargs = 3, default = (255, 255, 255),
    help = """(optional) Ending color, as a R/G/B triple of 8-bits integers.
    Default: %(default)s""")

output_parser.add_argument("--blur",
    dest = "blur_radius", metavar = "INTEGER", type = int, default = 0,
    help = """(optional) Blur radius for the graphic overlays. Default:
    %(default)d""")

output_parser.add_argument("--transparency",
    dest = "transparency_level", metavar = "INTEGER", type = int, default = 50,
    help = """(optional) Transparency level of the graphic overlays, from 0
    (opaque) to 255 (invisible). Default: %(default)d""")

output_parser.add_argument("--scale",
    dest = "scaling_factor", metavar = "FLOAT", type = float, default = 1.0,
    help = """(optional) Scaling factor of the graphic overlays.
    Default: %(default).2g""")

parser.add_argument("-v", "--verbose",
    dest = "verbose", action = "store_true", default = False,
    help = "(optional) if set, will display debug information")

options = parser.parse_args()

logger = logging.getLogger(os.path.basename(__file__))
log_formatter = logging.Formatter(
    "[%(asctime)s] %(name)s: %(levelname)s: %(message)s")

console_log_handler = logging.StreamHandler()
console_log_handler.setFormatter(log_formatter)

logger.addHandler(console_log_handler)
logger.propagate = False

def error (msg):
    logger.error(msg)
    sys.exit(1)

if (options.verbose):
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)

if (not options.output_fn.lower().endswith(".gif")):
    error("invalid extension for output file")

if (options.output_duration is not None) and (options.output_duration < 1):
    error("invalid value for --duration: %d" % options.output_duration)

if (options.output_fps < 1):
    error("invalid value for --fps: %d" % options.output_fps)

datasets = []
for dataset in options.datasets:
    dataset_options = {
        "filename": None,
        "start-color": options.start_color,
        "end-color": options.end_color,
        "mid-color": options.mid_color,
        "mid-value": options.mid_value,
        "blur": options.blur_radius,
        "scale": options.scaling_factor,
        "transparency": options.transparency_level,
    }

    if ('|' in dataset):
        for item in dataset.split('|'):
            if (not ':' in item):
                error("invalid syntax: missing ':' in " + item)

            key, value = item.lower().split(':', 1)
            if (not key in dataset_options):
                error("unknown parameter '%s'" % key)

            try:
                if (key == "filename"):
                    pass

                elif (key in ("start-color", "end-color", "mid-color")):
                    try:
                        value = map(int, value.split(','))
                        assert len(value) == 3
                    except:
                        raise Exception("invalid color: %s" % value)

                elif (key in ("mid-value", "scale")):
                    value = float(value)
                else:
                    value = int(value)

            except Exception as e:
                error("invalid value for parameter %s: %s" % (
                    key.replace('_', '-'), e))

            dataset_options[key] = value
    else:
        dataset_options["filename"] = dataset

    if (dataset_options["filename"] is None):
        error("missing key 'filename' in " + dataset)

    if (not os.path.exists(dataset_options["filename"])):
        error("file '%s' not found" % dataset_options["filename"])

    for key in ("start-color", "end-color"):
        for channel in dataset_options[key]:
            if (channel < 0) or (channel > 255):
                error("invalid color channel: %d" % channel)

    if (dataset_options["mid-color"] is None):
        start_color = dataset_options["start-color"]
        end_color = dataset_options["end-color"]
        dataset_options["mid-color"] = (
            int((start_color[0] + end_color[0]) / 2),
            int((start_color[1] + end_color[1]) / 2),
            int((start_color[2] + end_color[2]) / 2))
    else:
        for channel in dataset_options["mid-color"]:
            if (channel < 0) or (channel > 255):
                error("invalid color channel: %d" % channel)

    if (dataset_options["blur"] < 0):
        error("invalid value for blur radius: %d" % \
            dataset_options["blur"])

    if (not 0 <= dataset_options["transparency"] <= 255):
        error("invalid value for transparency level: %d" % \
            dataset_options["transparency"])

    if (dataset_options["scale"] < 1):
        error("invalid value for scale factor: %s" % \
            dataset_options["scale"])

    datasets.append(dataset_options)

try:
    import imageio
    import numpy
    import requests
    import PIL.Image
    import PIL.ImageDraw
    import PIL.ImageFilter
    import PIL.ImageFont

except ImportError as e:
    error("library '%s' not found" % str(e).split()[-1])

if (options.label_font is None):
    label_font = PIL.ImageFont.load_default()
elif (options.label_size < 0):
    error("invalid value for font size: %d" % options.label_size)
else:
    try:
        label_font = PIL.ImageFont.truetype(
            font = options.label_font,
            size = options.label_size)
    except:
        error("font '%s' not found" % options.label_font)

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

@contextlib.contextmanager
def step (name, is_debug = False):
    emit = logger.debug if (is_debug) else logger.info
    emit("%s: started" % name)

    try:
        yield
    except IOError:
        error("%s: exited with error" % name)

    emit("%s: done" % name)

with step("retrieving information about pathway %s" % options.pathway_id):
    with step("retrieving KGML", True):
        kgml_d = requests.get(
            "http://rest.kegg.jp/get/%s/kgml" % options.pathway_id)
        logger.debug("retrieving KGML from " + kgml_d.url)

    with step("parsing KGML", True):
        kgml_d = xml.parse(BytesIO(kgml_d.content)).getroot()
        organism_id = kgml_d.get("org").upper()
        pathway_id = kgml_d.get("number")
        pathway_title = kgml_d.get("title")

    with step("retrieving image", True):
        image_d = requests.get(kgml_d.get("image"))
        logger.debug("retrieving PNG from " + image_d.url)

        pathway_image = PIL.Image.open(BytesIO(image_d.content))
        logger.debug("format: %s, dimensions: %s, mode: %s" % (
            pathway_image.format, pathway_image.size, pathway_image.mode))

        if (pathway_image.mode != "RGBA"):
            pathway_image = pathway_image.convert(mode = "RGBA")

    logger.info("found pathway \"%s\" (organism '%s', pathway no. %s)" % (
        pathway_title, organism_id, pathway_id))

def list_graphic_elements (kgml_d):
    for entry_node in kgml_d.findall("entry"):
        entity_ids = tuple(entry_node.get("name").upper().split())
        entity_type = entry_node.get("type")

        graphic_element_node = entry_node.find("graphics")
        graphic_element_type = graphic_element_node.get("type")

        # extract the shape and coordinates of the graphic element
        if (graphic_element_type in ("rectangle", "circle")):
            w = int(graphic_element_node.get("width"))
            h = int(graphic_element_node.get("height"))
            x0 = int(graphic_element_node.get("x")) - w / 2
            y0 = int(graphic_element_node.get("y")) - h / 2
            x1, y1 = x0 + w, y0 + h

            graphic_element = (graphic_element_type, x0, y0, x1, y1)

        else:
            logger.debug("ignoring graphic element '%s'" % graphic_element_type)
            continue

        # extract and return the entity identifiers
        if (entity_type == "gene"):
            for entity_id in entity_ids:
                if (not entity_id.startswith(organism_id)):
                    error("invalid gene identifier: %s" % entity_id)

                entity_id = entity_id[len(organism_id) + 1:]
                yield (entity_id, entity_type, graphic_element)

        elif (entity_type == "compound"):
            for entity_id in entity_ids:
                namespace = None
                for ns in ("CPD", "GL"):
                    if (entity_id.startswith(ns + ':')):
                        namespace = ns
                        entity_id = entity_id[len(ns)+1:]

                if (namespace is None):
                    error("unknown entity type: %s" % entity_id)

                yield (entity_id, entity_type, graphic_element)

        else:
            logger.debug("ignoring entity '%s'" % entity_type)
            continue

entities, graphic_elements = {}, {}

with step("listing graphic elements"):
    count_per_entity_type = {}

    for (entity_id, entity_type, graphic_element) in list_graphic_elements(kgml_d):
        entities\
            .setdefault((entity_id, entity_type), [])\
            .append(graphic_element)

        graphic_elements\
            .setdefault(graphic_element, [])\
            .append((entity_id, entity_type))

        if (not entity_type in count_per_entity_type):
            count_per_entity_type[entity_type] = 0

        count_per_entity_type[entity_type] += 1

        logger.debug("found %s (%s): %s" % (
            entity_id, entity_type, graphic_element))

    logger.info("found %d graphic elements" % len(graphic_elements))

    logger.info("found %d entities (%s)" % (
        len(entities),
        ", ".join(["%d %ss" % (count, entity_type) for entity_type, count in sorted(count_per_entity_type.items())])))

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

def list_activity_levels (fn):
    if (fn.lower().endswith(".gz")):
        fh = gzip.open(fn, "rb")
    else:
        fh = open(fn, "rU")

    for entry in csv.reader(fh):
        if (len(entry) == 0):
            continue

        entry_id = entry[0].strip().upper()
        if (entry_id == ''):
            continue

        entry_levels = []
        for level in entry[1:]:
            try:
                entry_levels.append(float(level))
            except:
                error("invalid level for '%s': '%s'" % (entry_id, level))

        yield (entry_id, entry_levels)

def parse_entity_name (entity_name):
    entity_name_ = entity_name.upper()

    if (entity_name_.startswith(organism_id.upper() + ':')):
        return (entity_name_[len(organism_id)+1:], "gene")

    for ns in ("CPD", "GL"):
        if (entity_name_.startswith(ns + ':')):
            return (entity_name_[len(ns)+1:], "compound")

    return (entity_name_, None)

timepoints, levels = None, {}

for dataset_options in datasets:
    fn = dataset_options.pop("filename")
    levels_ = {}

    with step("loading levels from '%s'" % fn):
        ignored_entities = {}
        min_level, max_level = sys.maxsize, -sys.maxsize

        for entity_name, entity_levels in list_activity_levels(fn):
            entity_id, entity_type = parse_entity_name(entity_name)

            # case where no prefix was provided for the entity identifier
            if (entity_type is None):
                candidates = []
                for (entity_id_, entity_type_) in entities:
                    if (entity_id == entity_id_):
                        candidates.append(entity_type_)

                if (len(candidates) > 1):
                    error("ambiguous entity identifier '%s'" % entity_id)

                if (len(candidates) == 0):
                    ignored_entities[(entity_id, "?")] = True
                    continue

                entity_type = candidates[0]

            # case where a prefix was provided
            elif (not (entity_id, entity_type) in entities):
                ignored_entities[(entity_id, entity_type)] = True
                continue

            if ((entity_id, entity_type) in levels):
                error("duplicate information for %s '%s'" % (
                    entity_type, entity_id))

            if (timepoints is None):
                timepoints = range(len(entity_levels))

            elif (len(timepoints) != len(entity_levels)):
                error("inconsistent timepoints for %s '%s'" % (
                    entity_type, entity_id))

            levels_[(entity_id, entity_type)] = entity_levels
            min_level = min(min_level, min(entity_levels))
            max_level = max(max_level, max(entity_levels))

        logger.info("%d entit%s with level data (out of %d)" % (
            len(levels_),
            {True: "ies", False: "y"}[len(levels_) > 1],
            len(levels_) + len(ignored_entities)))

        if (len(levels_) == 0):
            logger.warning("no activity level found mapping to this pathway")
            continue

        if (min_level == max_level):
            error("no variation found in activity levels")

        mid_value = dataset_options.pop("mid-value")

        # if a mid value has been defined, ensure that
        # max_level and min_level are equidistant from it
        if (mid_value is not None):
            over_mid_value = max(max_level - mid_value, 0)
            below_mid_value = max(mid_value - min_level, 0)

            if (over_mid_value > below_mid_value):
                min_level = mid_value - over_mid_value

            elif (below_mid_value > over_mid_value):
                max_level = mid_value + below_mid_value

        logger.info("activity level range: %s to %s" % (min_level, max_level))

        normalize = lambda x: (x - min_level) / (max_level - min_level)

        if (mid_value is not None):
            mid_value = normalize(mid_value)

        for entity_key, entity_levels in levels_.items():
            levels[entity_key] = (
                dataset_options,
                map(normalize, entity_levels),
                mid_value)

        if (len(ignored_entities) > 0):
            entity_str = lambda entity_key: "%s (%s)" % entity_key \
                if (entity_key[1] is not None) else entity_key[0]
            ignored_entities = map(entity_str, ignored_entities)

            if (len(ignored_entities) > 6):
                entities_list = "%s, ... %s" % (
                    ', '.join(ignored_entities[:3]),
                    ', '.join(ignored_entities[-3:]))
            else:
                entities_list = ', '.join(ignored_entities)

            logger.info("%d entit%s ignored: %s" % (
                len(ignored_entities),
                {True: "ies", False: "y"}[len(ignored_entities) > 1],
                entities_list))

    logger.info("found %d entities, %d timepoints (%s)" % (
        len(levels), len(timepoints),
        ', '.join(map(str, timepoints))))

if (len(levels) == 0):
    error("no activity level found mapping to this pathway")

del entities

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

def linear_rgb_interpolation (start_rgb, end_rgb, fraction):
    rgb = [None, None, None]
    for i in range(3):
        rgb[i] = int(start_rgb[i] + (end_rgb[i] - start_rgb[i]) * fraction)

    return tuple(rgb)

def sigmoidal_rgb_interpolation (start_rgb, end_rgb, fraction):
    rgb = [None, None, None]
    for i in range(3):
        s = 1 / (1 + numpy.exp((0.5 - fraction) * 10))
        rgb[i] = int(start_rgb[i] + (end_rgb[i] - start_rgb[i]) * s)

    return tuple(rgb)

aggregate = {
    "mean":    lambda values: numpy.mean(values),
    "median":  lambda values: numpy.median(values),
    "lowest":  lambda values: min(values),
    "highest": lambda values: max(values),
    "random":  lambda values: random.choice(values),
}[options.aggregation_function]

ignored_graphic_elements = []
for graphic_element, linked_entities in graphic_elements.items():
    graphic_options, mid_value, colors = None, None, []

    # for each timepoint,
    for timepoint_n in range(len(timepoints)):
        # collect the activity level(s) of the linked entities
        activity_levels = []
        for entity_key in linked_entities:
            if (not entity_key in levels):
                continue

            graphic_options_, activity_levels_, mid_value_ = levels[entity_key]
            activity_levels_ = list(activity_levels_)
            if (graphic_options is not None) and \
               (graphic_options != graphic_options_):
                error(
                    "inconsistent graphic options among entities sharing " +\
                    "the same graphic overlay; entities are: %s" % \
                    ', '.join(linked_entities))

            if (mid_value is not None) and \
               (mid_value != mid_value_):
                error(
                    "inconsistent mid values among entities sharing " +\
                    "the same graphic overlay; entities are: %s" % \
                    ', '.join(linked_entities))

            activity_levels.append(activity_levels_[timepoint_n])
            graphic_options = graphic_options_
            mid_value = mid_value_

        # ignore this time point if no activity level is found
        if (len(activity_levels) == 0):
            continue

        # aggregate the activity levels
        activity_level = aggregate(activity_levels)

        # calculate the color for this time point
        if (mid_value is not None):
            delta = activity_level - mid_value

            if (delta < 0):
                lower_rgb = graphic_options["start-color"]
                higher_rgb = graphic_options["mid-color"]
                activity_level = activity_level / mid_value
            elif (delta > 0):
                lower_rgb = graphic_options["mid-color"]
                higher_rgb = graphic_options["end-color"]
                activity_level = delta / (1 - mid_value)
            else:
                lower_rgb = graphic_options["mid-color"]
                higher_rgb = graphic_options["mid-color"]
        else:
            lower_rgb = graphic_options["start-color"]
            higher_rgb = graphic_options["end-color"]

        colors.append(linear_rgb_interpolation(
            lower_rgb, higher_rgb, activity_level))

    if (len(colors) == 0):
        ignored_graphic_elements.append(graphic_element)
    else:
        graphic_elements[graphic_element] = (
            linked_entities, graphic_options, colors)

for graphic_element in ignored_graphic_elements:
    del graphic_elements[graphic_element]

del activity_levels

#:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

with step("generating frames"):
    movie = imageio.save(options.output_fn, fps = options.output_fps)

    if (options.output_duration is None):
        options.output_duration = len(timepoints)

    logger.debug("output_duration = %d" % options.output_duration)

    tick_length = 1 / options.output_fps
    logger.debug("tick_length = %.2g" % tick_length)

    # for each tick (i.e., frame),
    current_time, current_frame = 0., 0
    while (current_time <= options.output_duration):
        pathway_image_frame = pathway_image.copy()
        pathway_image_frame_canvas = PIL.ImageDraw.Draw(pathway_image_frame)

        # identification of the time point closest to this tick
        closest_timepoint_n, time_delta = None, sys.maxint
        for timepoint_n, timepoint in enumerate(timepoints):
            time_delta_ = timepoint - current_time
            if (abs(time_delta_) < abs(time_delta)):
                closest_timepoint_n = timepoint_n
                time_delta = time_delta_

        # calculation of the interpolated color for this tick
        def calculate_color (colors):
            # special case: we are right on an existing time point
            if (abs(time_delta) < 1e-3):
                return colors[closest_timepoint_n]

            elif (time_delta < 0):
                start_timepoint_n = closest_timepoint_n
                end_timepoint_n = closest_timepoint_n + 1
                position = -time_delta
            else:
                start_timepoint_n = closest_timepoint_n - 1
                end_timepoint_n = closest_timepoint_n
                position = 1 - time_delta

            start_timepoint_n = max(start_timepoint_n, 0)
            end_timepoint_n = min(end_timepoint_n, len(timepoints) - 1)

            if (start_timepoint_n == end_timepoint_n):
                return colors[closest_timepoint_n]

            start_rgb = colors[start_timepoint_n]
            end_rgb = colors[end_timepoint_n]

            position /= (
                timepoints[end_timepoint_n] - timepoints[start_timepoint_n])

            return sigmoidal_rgb_interpolation(start_rgb, end_rgb, position)

        # painting of the graphic elements
        for graphic_element in graphic_elements:
            (linked_entities, graphic_options, colors) = \
                graphic_elements[graphic_element]
            (graphic_element_type, x0, y0, x1, y1) = graphic_element
            padding = graphic_options["blur"] * 2

            # canvas for the graphic element: large rectangle with the
            # final color and encompassing the actual graphic element
            graphic_element_image = PIL.Image.new("RGBA",
                (int((x1 - x0) * graphic_options["scale"] + padding * 2) + 1,
                 int((y1 - y0) * graphic_options["scale"] + padding * 2) + 1),
                color = calculate_color(colors))

            graphic_element_canvas = PIL.ImageDraw.Draw(
                graphic_element_image)

            # mask for the graphic element: blurred
            # version of the actual graphic element
            graphic_element_mask = PIL.Image.new("L",
                graphic_element_image.size, color = 255)

            graphic_element_mask_canvas = PIL.ImageDraw.Draw(
                graphic_element_mask)

            graphic_element_bbox = (
                padding, padding,
                (x1 - x0) * graphic_options["scale"] + padding,
                (y1 - y0) * graphic_options["scale"] + padding)

            if (graphic_element_type == "rectangle"):
                graphic_element_mask_canvas.rectangle(
                    graphic_element_bbox,
                    outline = 0, fill = 0)

            elif (graphic_element_type == "circle"):
                graphic_element_mask_canvas.ellipse(
                    graphic_element_bbox,
                    outline = 0, fill = 0)

            graphic_element_mask = graphic_element_mask\
                .filter(PIL.ImageFilter.GaussianBlur(
                    radius = graphic_options["blur"]))

            graphic_element_mask = graphic_element_mask.point(
                lambda v: (255 - v) * (1 - graphic_options["transparency"] / 255))

            # the mask is used to set the alpha
            # channel of the graphic element...
            graphic_element_image.putalpha(graphic_element_mask)

            # ...and the result is pasted onto the frame
            pathway_image_frame.paste(
                graphic_element_image,
                (int(x0 - padding - 0.5 * (x1 - x0) * (graphic_options["scale"] - 1)),
                 int(y0 - padding - 0.5 * (y1 - y0) * (graphic_options["scale"] - 1))),
                graphic_element_image)

            # show labels on entities, if requested
            if (options.show_labels):
                label = ' '.join([entity_id for entity_id, entity_type in linked_entities])
                label_width, label_height = label_font.getsize(label)
                label_x = x0 + (x1 - x0) / 2 - label_width / 2
                label_y = y0 + (y1 - y0) / 2 + 12

                pathway_image_frame_canvas.rectangle(
                    (label_x - 1, label_y - 1,
                     label_x + label_width + 1,
                     label_y + label_height + 1),
                    fill = (255, 255, 255, 20))

                pathway_image_frame_canvas.text(
                    (label_x, label_y),
                    label,
                    fill = (0, 0, 0), font = label_font)

        # show the current timepoint on the lower right corner
        label = "Timepoint #%d (out of %d)" % (
            closest_timepoint_n + 1, len(timepoints))
        label_width, label_height = label_font.getsize(label)

        picture_width, picture_height = pathway_image_frame.size
        pathway_image_frame_canvas.text(
            (picture_width - label_width - 5,
             picture_height - label_height - 5),
            label,
            fill = (0, 0, 0), font = label_font)

        # add this frame to the animated GIF
        movie.append_data(numpy.array(pathway_image_frame))

        current_time += tick_length
        current_frame += 1

    del movie

logger.info("all done.")
